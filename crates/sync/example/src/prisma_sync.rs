// Code generated by SD Sync Generator. DO NOT EDIT

pub fn new(
	prisma_client: crate::prisma::PrismaClient,
	node_id: Vec<u8>,
) -> (
	_prisma::PrismaCRDTClient,
	::tokio::sync::mpsc::Receiver<::sd_sync::CRDTOperation>,
) {
	let (tx, rx) = ::tokio::sync::mpsc::channel(64);
	let crdt_client = _prisma::PrismaCRDTClient::_new(prisma_client, node_id, tx);
	(crdt_client, rx)
}
pub mod file_path {
	pub enum SetParam {}
	pub struct Actions<'a> {
		pub(super) client: &'a super::_prisma::PrismaCRDTClient,
	}
	impl<'a> Actions<'a> {
		pub fn create(&self, id: Vec<u8>, path: String, _params: Vec<SetParam>) {}
	}
}
pub mod object {
	pub enum SetParam {}
	pub struct Actions<'a> {
		pub(super) client: &'a super::_prisma::PrismaCRDTClient,
	}
	impl<'a> Actions<'a> {
		pub fn create(&self) {}
	}
}
pub mod _prisma {
	pub struct PrismaCRDTClient {
		pub(super) client: crate::prisma::PrismaClient,
		pub node_id: Vec<u8>,
		operation_sender: ::tokio::sync::mpsc::Sender<::sd_sync::CRDTOperation>,
	}
	impl PrismaCRDTClient {
		pub(super) fn _new(
			client: crate::prisma::PrismaClient,
			node_id: Vec<u8>,
			operation_sender: ::tokio::sync::mpsc::Sender<::sd_sync::CRDTOperation>,
		) -> Self {
			Self {
				client,
				node_id,
				operation_sender,
			}
		}
		pub fn file_path(&self) -> super::file_path::Actions {
			super::file_path::Actions { client: self }
		}
		pub fn object(&self) -> super::object::Actions {
			super::object::Actions { client: self }
		}
	}
}
