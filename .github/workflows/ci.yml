name: CI

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '**/.md'
  workflow_dispatch:

env:
  SPACEDRIVE_CUSTOM_APT_FLAGS: --no-install-recommends

jobs:
  typescript:
    name: TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.x.x

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install pnpm dependencies
        run: pnpm i --frozen-lockfile

      - name: Perform typechecks
        run: pnpm typecheck

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.x.x

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install pnpm dependencies
        run: pnpm i --frozen-lockfile

      - name: Perform linting
        run: pnpm lint

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      - name: Cache Rust deps
        uses: Swatinem/rust-cache@v2

      - name: Generate Prisma client
        uses: ./.github/actions/generate-prisma-client

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup
        uses: ./.github/actions/setup

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  gather_published_crates:
    runs-on: ubuntu-latest
    outputs:
      members: ${{ steps.cargo-metadata.outputs.members }}
    steps:
      - uses: actions/checkout@v3

      - id: cargo-metadata
        run: |
          WORKSPACE_MEMBERS=$(cargo metadata --format-version=1 --no-deps | jq -c '.packages | .[] | select(.publish == null) | .name' | jq -s '.' | jq -c '.')
          echo "members=${WORKSPACE_MEMBERS}" >> $GITHUB_OUTPUT

  test:
    runs-on: ${{ matrix.platform }}
    needs: gather_published_crates
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        crate: ${{ fromJSON(needs.gather_published_crates.outputs.members) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup

      - name: Test ${{ matrix.platform }}
        run: cargo test -p ${{ matrix.crate }} --all-features
