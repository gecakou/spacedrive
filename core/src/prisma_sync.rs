// Code generated by SD Sync Generator. DO NOT EDIT

impl crate::prisma::owned_operation::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::owned_operation::id::set(::serde_json::from_value(val).unwrap()),
			"timestamp" => crate::prisma::owned_operation::timestamp::set(
				::serde_json::from_value(val).unwrap(),
			),
			"data" => {
				crate::prisma::owned_operation::data::set(::serde_json::from_value(val).unwrap())
			}
			"model" => {
				crate::prisma::owned_operation::model::set(::serde_json::from_value(val).unwrap())
			}
			"node_id" => {
				crate::prisma::owned_operation::node_id::set(::serde_json::from_value(val).unwrap())
			}
			"node" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::owned_operation::node::connect(
					crate::prisma::node::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::shared_operation::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => {
				crate::prisma::shared_operation::id::set(::serde_json::from_value(val).unwrap())
			}
			"timestamp" => crate::prisma::shared_operation::timestamp::set(
				::serde_json::from_value(val).unwrap(),
			),
			"model" => {
				crate::prisma::shared_operation::model::set(::serde_json::from_value(val).unwrap())
			}
			"record_id" => crate::prisma::shared_operation::record_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"kind" => {
				crate::prisma::shared_operation::kind::set(::serde_json::from_value(val).unwrap())
			}
			"data" => {
				crate::prisma::shared_operation::data::set(::serde_json::from_value(val).unwrap())
			}
			"node_id" => crate::prisma::shared_operation::node_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"node" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::shared_operation::node::connect(
					crate::prisma::node::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::sync_event::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::sync_event::id::set(::serde_json::from_value(val).unwrap()),
			"node_id" => {
				crate::prisma::sync_event::node_id::set(::serde_json::from_value(val).unwrap())
			}
			"timestamp" => {
				crate::prisma::sync_event::timestamp::set(::serde_json::from_value(val).unwrap())
			}
			"record_id" => {
				crate::prisma::sync_event::record_id::set(::serde_json::from_value(val).unwrap())
			}
			"kind" => crate::prisma::sync_event::kind::set(::serde_json::from_value(val).unwrap()),
			"column" => {
				crate::prisma::sync_event::column::set(::serde_json::from_value(val).unwrap())
			}
			"value" => {
				crate::prisma::sync_event::value::set(::serde_json::from_value(val).unwrap())
			}
			"node" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::sync_event::node::connect(
					crate::prisma::node::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::statistics::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::statistics::id::set(::serde_json::from_value(val).unwrap()),
			"date_captured" => crate::prisma::statistics::date_captured::set(
				::serde_json::from_value(val).unwrap(),
			),
			"total_object_count" => crate::prisma::statistics::total_object_count::set(
				::serde_json::from_value(val).unwrap(),
			),
			"library_db_size" => crate::prisma::statistics::library_db_size::set(
				::serde_json::from_value(val).unwrap(),
			),
			"total_bytes_used" => crate::prisma::statistics::total_bytes_used::set(
				::serde_json::from_value(val).unwrap(),
			),
			"total_bytes_capacity" => crate::prisma::statistics::total_bytes_capacity::set(
				::serde_json::from_value(val).unwrap(),
			),
			"total_unique_bytes" => crate::prisma::statistics::total_unique_bytes::set(
				::serde_json::from_value(val).unwrap(),
			),
			"total_bytes_free" => crate::prisma::statistics::total_bytes_free::set(
				::serde_json::from_value(val).unwrap(),
			),
			"preview_media_bytes" => crate::prisma::statistics::preview_media_bytes::set(
				::serde_json::from_value(val).unwrap(),
			),
			_ => return None,
		})
	}
}
impl crate::prisma::node::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::node::id::set(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::node::pub_id::set(::serde_json::from_value(val).unwrap()),
			"name" => crate::prisma::node::name::set(::serde_json::from_value(val).unwrap()),
			"platform" => {
				crate::prisma::node::platform::set(::serde_json::from_value(val).unwrap())
			}
			"version" => crate::prisma::node::version::set(::serde_json::from_value(val).unwrap()),
			"last_seen" => {
				crate::prisma::node::last_seen::set(::serde_json::from_value(val).unwrap())
			}
			"timezone" => {
				crate::prisma::node::timezone::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => {
				crate::prisma::node::date_created::set(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::volume::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::volume::id::set(::serde_json::from_value(val).unwrap()),
			"node_id" => {
				crate::prisma::volume::node_id::set(::serde_json::from_value(val).unwrap())
			}
			"name" => crate::prisma::volume::name::set(::serde_json::from_value(val).unwrap()),
			"mount_point" => {
				crate::prisma::volume::mount_point::set(::serde_json::from_value(val).unwrap())
			}
			"total_bytes_capacity" => crate::prisma::volume::total_bytes_capacity::set(
				::serde_json::from_value(val).unwrap(),
			),
			"total_bytes_available" => crate::prisma::volume::total_bytes_available::set(
				::serde_json::from_value(val).unwrap(),
			),
			"disk_type" => {
				crate::prisma::volume::disk_type::set(::serde_json::from_value(val).unwrap())
			}
			"filesystem" => {
				crate::prisma::volume::filesystem::set(::serde_json::from_value(val).unwrap())
			}
			"is_system" => {
				crate::prisma::volume::is_system::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::volume::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::location::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::location::id::set(::serde_json::from_value(val).unwrap()),
			"pub_id" => {
				crate::prisma::location::pub_id::set(::serde_json::from_value(val).unwrap())
			}
			"node_id" => {
				crate::prisma::location::node_id::set(::serde_json::from_value(val).unwrap())
			}
			"name" => crate::prisma::location::name::set(::serde_json::from_value(val).unwrap()),
			"local_path" => {
				crate::prisma::location::local_path::set(::serde_json::from_value(val).unwrap())
			}
			"total_capacity" => {
				crate::prisma::location::total_capacity::set(::serde_json::from_value(val).unwrap())
			}
			"available_capacity" => crate::prisma::location::available_capacity::set(
				::serde_json::from_value(val).unwrap(),
			),
			"filesystem" => {
				crate::prisma::location::filesystem::set(::serde_json::from_value(val).unwrap())
			}
			"disk_type" => {
				crate::prisma::location::disk_type::set(::serde_json::from_value(val).unwrap())
			}
			"is_removable" => {
				crate::prisma::location::is_removable::set(::serde_json::from_value(val).unwrap())
			}
			"is_online" => {
				crate::prisma::location::is_online::set(::serde_json::from_value(val).unwrap())
			}
			"is_archived" => {
				crate::prisma::location::is_archived::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => {
				crate::prisma::location::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"node" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::location::node::connect(
					crate::prisma::node::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::object::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::object::id::set(::serde_json::from_value(val).unwrap()),
			"cas_id" => crate::prisma::object::cas_id::set(::serde_json::from_value(val).unwrap()),
			"integrity_checksum" => crate::prisma::object::integrity_checksum::set(
				::serde_json::from_value(val).unwrap(),
			),
			"name" => crate::prisma::object::name::set(::serde_json::from_value(val).unwrap()),
			"extension" => {
				crate::prisma::object::extension::set(::serde_json::from_value(val).unwrap())
			}
			"kind" => crate::prisma::object::kind::set(::serde_json::from_value(val).unwrap()),
			"size_in_bytes" => {
				crate::prisma::object::size_in_bytes::set(::serde_json::from_value(val).unwrap())
			}
			"key_id" => crate::prisma::object::key_id::set(::serde_json::from_value(val).unwrap()),
			"hidden" => crate::prisma::object::hidden::set(::serde_json::from_value(val).unwrap()),
			"favorite" => {
				crate::prisma::object::favorite::set(::serde_json::from_value(val).unwrap())
			}
			"important" => {
				crate::prisma::object::important::set(::serde_json::from_value(val).unwrap())
			}
			"has_thumbnail" => {
				crate::prisma::object::has_thumbnail::set(::serde_json::from_value(val).unwrap())
			}
			"has_thumbstrip" => {
				crate::prisma::object::has_thumbstrip::set(::serde_json::from_value(val).unwrap())
			}
			"has_video_preview" => crate::prisma::object::has_video_preview::set(
				::serde_json::from_value(val).unwrap(),
			),
			"ipfs_id" => {
				crate::prisma::object::ipfs_id::set(::serde_json::from_value(val).unwrap())
			}
			"note" => crate::prisma::object::note::set(::serde_json::from_value(val).unwrap()),
			"date_created" => {
				crate::prisma::object::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::object::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			"date_indexed" => {
				crate::prisma::object::date_indexed::set(::serde_json::from_value(val).unwrap())
			}
			"key" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::object::key::connect(
					crate::prisma::key::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::file_path::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::file_path::id::set(::serde_json::from_value(val).unwrap()),
			"is_dir" => {
				crate::prisma::file_path::is_dir::set(::serde_json::from_value(val).unwrap())
			}
			"location_id" => {
				crate::prisma::file_path::location_id::set(::serde_json::from_value(val).unwrap())
			}
			"location" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::file_path::location::connect(
					crate::prisma::location::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			"materialized_path" => crate::prisma::file_path::materialized_path::set(
				::serde_json::from_value(val).unwrap(),
			),
			"name" => crate::prisma::file_path::name::set(::serde_json::from_value(val).unwrap()),
			"extension" => {
				crate::prisma::file_path::extension::set(::serde_json::from_value(val).unwrap())
			}
			"object_id" => {
				crate::prisma::file_path::object_id::set(::serde_json::from_value(val).unwrap())
			}
			"object" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::file_path::object::connect(
					crate::prisma::object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			"parent_id" => {
				crate::prisma::file_path::parent_id::set(::serde_json::from_value(val).unwrap())
			}
			"key_id" => {
				crate::prisma::file_path::key_id::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => {
				crate::prisma::file_path::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::file_path::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			"date_indexed" => {
				crate::prisma::file_path::date_indexed::set(::serde_json::from_value(val).unwrap())
			}
			"key" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::file_path::key::connect(
					crate::prisma::key::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::file_conflict::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"original_object_id" => crate::prisma::file_conflict::original_object_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"detactched_object_id" => crate::prisma::file_conflict::detactched_object_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			_ => return None,
		})
	}
}
impl crate::prisma::key::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::key::id::set(::serde_json::from_value(val).unwrap()),
			"uuid" => crate::prisma::key::uuid::set(::serde_json::from_value(val).unwrap()),
			"name" => crate::prisma::key::name::set(::serde_json::from_value(val).unwrap()),
			"default" => crate::prisma::key::default::set(::serde_json::from_value(val).unwrap()),
			"date_created" => {
				crate::prisma::key::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"algorithm" => {
				crate::prisma::key::algorithm::set(::serde_json::from_value(val).unwrap())
			}
			"hashing_algorithm" => {
				crate::prisma::key::hashing_algorithm::set(::serde_json::from_value(val).unwrap())
			}
			"content_salt" => {
				crate::prisma::key::content_salt::set(::serde_json::from_value(val).unwrap())
			}
			"master_key" => {
				crate::prisma::key::master_key::set(::serde_json::from_value(val).unwrap())
			}
			"master_key_nonce" => {
				crate::prisma::key::master_key_nonce::set(::serde_json::from_value(val).unwrap())
			}
			"key_nonce" => {
				crate::prisma::key::key_nonce::set(::serde_json::from_value(val).unwrap())
			}
			"key" => crate::prisma::key::key::set(::serde_json::from_value(val).unwrap()),
			"salt" => crate::prisma::key::salt::set(::serde_json::from_value(val).unwrap()),
			"automount" => {
				crate::prisma::key::automount::set(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::media_data::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::media_data::id::set(::serde_json::from_value(val).unwrap()),
			"pixel_width" => {
				crate::prisma::media_data::pixel_width::set(::serde_json::from_value(val).unwrap())
			}
			"pixel_height" => {
				crate::prisma::media_data::pixel_height::set(::serde_json::from_value(val).unwrap())
			}
			"longitude" => {
				crate::prisma::media_data::longitude::set(::serde_json::from_value(val).unwrap())
			}
			"latitude" => {
				crate::prisma::media_data::latitude::set(::serde_json::from_value(val).unwrap())
			}
			"fps" => crate::prisma::media_data::fps::set(::serde_json::from_value(val).unwrap()),
			"capture_device_make" => crate::prisma::media_data::capture_device_make::set(
				::serde_json::from_value(val).unwrap(),
			),
			"capture_device_model" => crate::prisma::media_data::capture_device_model::set(
				::serde_json::from_value(val).unwrap(),
			),
			"capture_device_software" => crate::prisma::media_data::capture_device_software::set(
				::serde_json::from_value(val).unwrap(),
			),
			"duration_seconds" => crate::prisma::media_data::duration_seconds::set(
				::serde_json::from_value(val).unwrap(),
			),
			"codecs" => {
				crate::prisma::media_data::codecs::set(::serde_json::from_value(val).unwrap())
			}
			"streams" => {
				crate::prisma::media_data::streams::set(::serde_json::from_value(val).unwrap())
			}
			"object" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::media_data::object::connect(
					crate::prisma::object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::tag::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::tag::id::set(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::tag::pub_id::set(::serde_json::from_value(val).unwrap()),
			"name" => crate::prisma::tag::name::set(::serde_json::from_value(val).unwrap()),
			"color" => crate::prisma::tag::color::set(::serde_json::from_value(val).unwrap()),
			"total_objects" => {
				crate::prisma::tag::total_objects::set(::serde_json::from_value(val).unwrap())
			}
			"redundancy_goal" => {
				crate::prisma::tag::redundancy_goal::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => {
				crate::prisma::tag::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::tag::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::tag_on_object::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"date_created" => crate::prisma::tag_on_object::date_created::set(
				::serde_json::from_value(val).unwrap(),
			),
			"tag_id" => {
				crate::prisma::tag_on_object::tag_id::set(::serde_json::from_value(val).unwrap())
			}
			"tag" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::tag_on_object::tag::connect(
					crate::prisma::tag::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			"object_id" => {
				crate::prisma::tag_on_object::object_id::set(::serde_json::from_value(val).unwrap())
			}
			"object" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::tag_on_object::object::connect(
					crate::prisma::object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::label::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::label::id::set(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::label::pub_id::set(::serde_json::from_value(val).unwrap()),
			"name" => crate::prisma::label::name::set(::serde_json::from_value(val).unwrap()),
			"date_created" => {
				crate::prisma::label::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::label::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::label_on_object::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"date_created" => crate::prisma::label_on_object::date_created::set(
				::serde_json::from_value(val).unwrap(),
			),
			"label_id" => crate::prisma::label_on_object::label_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"label" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::label_on_object::label::connect(
					crate::prisma::label::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			"object_id" => crate::prisma::label_on_object::object_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"object" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::label_on_object::object::connect(
					crate::prisma::object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::space::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::space::id::set(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::space::pub_id::set(::serde_json::from_value(val).unwrap()),
			"name" => crate::prisma::space::name::set(::serde_json::from_value(val).unwrap()),
			"description" => {
				crate::prisma::space::description::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => {
				crate::prisma::space::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::space::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::object_in_space::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"date_created" => crate::prisma::object_in_space::date_created::set(
				::serde_json::from_value(val).unwrap(),
			),
			"space_id" => crate::prisma::object_in_space::space_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"space" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::object_in_space::space::connect(
					crate::prisma::space::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			"object_id" => crate::prisma::object_in_space::object_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"object" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::object_in_space::object::connect(
					crate::prisma::object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::job::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::job::id::set(::serde_json::from_value(val).unwrap()),
			"name" => crate::prisma::job::name::set(::serde_json::from_value(val).unwrap()),
			"node_id" => crate::prisma::job::node_id::set(::serde_json::from_value(val).unwrap()),
			"action" => crate::prisma::job::action::set(::serde_json::from_value(val).unwrap()),
			"status" => crate::prisma::job::status::set(::serde_json::from_value(val).unwrap()),
			"data" => crate::prisma::job::data::set(::serde_json::from_value(val).unwrap()),
			"metadata" => crate::prisma::job::metadata::set(::serde_json::from_value(val).unwrap()),
			"task_count" => {
				crate::prisma::job::task_count::set(::serde_json::from_value(val).unwrap())
			}
			"completed_task_count" => crate::prisma::job::completed_task_count::set(
				::serde_json::from_value(val).unwrap(),
			),
			"date_created" => {
				crate::prisma::job::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::job::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			"seconds_elapsed" => {
				crate::prisma::job::seconds_elapsed::set(::serde_json::from_value(val).unwrap())
			}
			"nodes" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::job::nodes::connect(
					crate::prisma::node::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::album::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::album::id::set(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::album::pub_id::set(::serde_json::from_value(val).unwrap()),
			"name" => crate::prisma::album::name::set(::serde_json::from_value(val).unwrap()),
			"is_hidden" => {
				crate::prisma::album::is_hidden::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => {
				crate::prisma::album::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::album::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::object_in_album::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"date_created" => crate::prisma::object_in_album::date_created::set(
				::serde_json::from_value(val).unwrap(),
			),
			"album_id" => crate::prisma::object_in_album::album_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"album" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::object_in_album::album::connect(
					crate::prisma::album::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			"object_id" => crate::prisma::object_in_album::object_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"object" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::object_in_album::object::connect(
					crate::prisma::object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::comment::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::comment::id::set(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::comment::pub_id::set(::serde_json::from_value(val).unwrap()),
			"content" => {
				crate::prisma::comment::content::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => {
				crate::prisma::comment::date_created::set(::serde_json::from_value(val).unwrap())
			}
			"date_modified" => {
				crate::prisma::comment::date_modified::set(::serde_json::from_value(val).unwrap())
			}
			"object_id" => {
				crate::prisma::comment::object_id::set(::serde_json::from_value(val).unwrap())
			}
			"object" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::comment::object::connect(
					crate::prisma::object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::indexer_rule::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::indexer_rule::id::set(::serde_json::from_value(val).unwrap()),
			"kind" => {
				crate::prisma::indexer_rule::kind::set(::serde_json::from_value(val).unwrap())
			}
			"name" => {
				crate::prisma::indexer_rule::name::set(::serde_json::from_value(val).unwrap())
			}
			"parameters" => {
				crate::prisma::indexer_rule::parameters::set(::serde_json::from_value(val).unwrap())
			}
			"date_created" => crate::prisma::indexer_rule::date_created::set(
				::serde_json::from_value(val).unwrap(),
			),
			"date_modified" => crate::prisma::indexer_rule::date_modified::set(
				::serde_json::from_value(val).unwrap(),
			),
			_ => return None,
		})
	}
}
impl crate::prisma::indexer_rules_in_location::SetParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"date_created" => crate::prisma::indexer_rules_in_location::date_created::set(
				::serde_json::from_value(val).unwrap(),
			),
			"location_id" => crate::prisma::indexer_rules_in_location::location_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"location" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::indexer_rules_in_location::location::connect(
					crate::prisma::location::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			"indexer_rule_id" => crate::prisma::indexer_rules_in_location::indexer_rule_id::set(
				::serde_json::from_value(val).unwrap(),
			),
			"indexer_rule" => {
				let val: std::collections::HashMap<String, ::serde_json::Value> =
					::serde_json::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				crate::prisma::indexer_rules_in_location::indexer_rule::connect(
					crate::prisma::indexer_rule::UniqueWhereParam::deserialize(&val.0, val.1)
						.unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl crate::prisma::owned_operation::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => {
				crate::prisma::owned_operation::id::equals(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::shared_operation::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => {
				crate::prisma::shared_operation::id::equals(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::sync_event::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::sync_event::id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::statistics::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::statistics::id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::node::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::node::id::equals(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::node::pub_id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::volume::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::volume::id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::location::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::location::id::equals(::serde_json::from_value(val).unwrap()),
			"pub_id" => {
				crate::prisma::location::pub_id::equals(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::object::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::object::id::equals(::serde_json::from_value(val).unwrap()),
			"cas_id" => {
				crate::prisma::object::cas_id::equals(::serde_json::from_value(val).unwrap())
			}
			"integrity_checksum" => crate::prisma::object::integrity_checksum::equals(
				::serde_json::from_value(val).unwrap(),
			),
			_ => return None,
		})
	}
}
impl crate::prisma::file_path::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			_ => return None,
		})
	}
}
impl crate::prisma::file_conflict::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"original_object_id" => crate::prisma::file_conflict::original_object_id::equals(
				::serde_json::from_value(val).unwrap(),
			),
			"detactched_object_id" => crate::prisma::file_conflict::detactched_object_id::equals(
				::serde_json::from_value(val).unwrap(),
			),
			_ => return None,
		})
	}
}
impl crate::prisma::key::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::key::id::equals(::serde_json::from_value(val).unwrap()),
			"uuid" => crate::prisma::key::uuid::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::media_data::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::media_data::id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::tag::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::tag::id::equals(::serde_json::from_value(val).unwrap()),
			"pub_id" => crate::prisma::tag::pub_id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::tag_on_object::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			_ => return None,
		})
	}
}
impl crate::prisma::label::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::label::id::equals(::serde_json::from_value(val).unwrap()),
			"pub_id" => {
				crate::prisma::label::pub_id::equals(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::label_on_object::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			_ => return None,
		})
	}
}
impl crate::prisma::space::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::space::id::equals(::serde_json::from_value(val).unwrap()),
			"pub_id" => {
				crate::prisma::space::pub_id::equals(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::object_in_space::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			_ => return None,
		})
	}
}
impl crate::prisma::job::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::job::id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::album::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::album::id::equals(::serde_json::from_value(val).unwrap()),
			"pub_id" => {
				crate::prisma::album::pub_id::equals(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::object_in_album::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			_ => return None,
		})
	}
}
impl crate::prisma::comment::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::comment::id::equals(::serde_json::from_value(val).unwrap()),
			"pub_id" => {
				crate::prisma::comment::pub_id::equals(::serde_json::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl crate::prisma::indexer_rule::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			"id" => crate::prisma::indexer_rule::id::equals(::serde_json::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
impl crate::prisma::indexer_rules_in_location::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::serde_json::Value) -> Option<Self> {
		Some(match field {
			_ => return None,
		})
	}
}
